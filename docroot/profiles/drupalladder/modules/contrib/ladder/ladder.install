<?php


/**
 * On an existing Ladder site, convert all old curriculum nodes to the new
 * ladder node type.
 *
 * This only runs during update because there will be no curriculum nodes if
 * this module is installed anew.
 *
 * Field Collection creation is based on this example:
 * http://drupal.org/node/1477186
 */
function ladder_update_7001() {
  // Make sure field_collection is enabled
  if (!module_exists('field_collection')) {
    $enabled = module_enable(array('field_collection'));
    // If it failed to enable, the module is probably missing.
    if (!$enabled) {
      $t = get_t();
      $module_links = array(
        '!field_collection' => l($t('Field Collection'), 'http://drupal.org/project/field_collection'),
        '!entity_api' => l($t('Entity API'), 'http://drupal.org/project/entity')
      );
      throw new DrupalUpdateException($t('!field_collection cannot be enabled. Make sure that the module is in place, along with !entity_api, on which it depends. Install these modules and re-run update.php.', $module_links));
    }
  }

  // Revert the Ladder feature to make sure that fields are created
  $feature = feature_load('ladder', TRUE);
  foreach (array_keys($feature->info['features']) as $component) {
    if (features_hook($component, 'features_revert')) {
      $components[] = $component;
    }
  }
  features_revert(array('ladder' => $components));


  // Load the controller class file.
  module_load_include('inc', 'entity', 'includes/entity.controller');

  // Get all curriculum nodes
  $nids = db_select('node', 'n')
    ->fields('n', array('nid'))
    ->condition('type', 'curriculum')
    ->execute();

  // Process each node
  while (($nid = $nids->fetchField()) > 0) {
    $node = node_load($nid);
    // Prep the new Ladder Sections field collection
    $values = array(
      'field_name' => 'field_ladder_sections',
      'field_ladder_lessons' => $node->field_curriculum_lessons,
    );
    // Save the field collection values
    $entity = entity_create('field_collection_item', $values);
    // Attach the new field collection to the node and save it
    $entity->setHostEntity('node', $node);
    $entity->save();

    
    // Change the node to the new type
    $node->type = 'ladder';

    // Switch to new Overview field name
    $node->field_lesson_overview = $node->field_curriculum_overview;
    unset($node->field_curriculum_overview);
    // Remove the old lessons field
    unset($node->field_curriculum_lessons);
    node_save($node);
  }
}
